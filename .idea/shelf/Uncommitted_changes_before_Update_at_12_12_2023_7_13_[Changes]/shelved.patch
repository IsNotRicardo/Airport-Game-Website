Index: game.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math\r\nimport mysql.connector\r\nfrom geopy.distance import geodesic\r\nfrom flask import Blueprint, request\r\n\r\nconnection = mysql.connector.connect(\r\n    host='127.0.0.1',\r\n    port='3306',\r\n    database='flight_game',\r\n    user='dbuser',\r\n    password='1234',\r\n    autocommit=True\r\n)\r\n\r\nairport_type = username = str()\r\n\r\nroutes = Blueprint('game', __name__)\r\n\r\n\r\ndef check_username(user):\r\n    cursor = connection.cursor(buffered=True)\r\n    cursor.execute(\"SELECT screen_name FROM game WHERE screen_name = '\" + user + \"'\")\r\n\r\n    if cursor.rowcount == 0:\r\n        cursor.execute(\"SELECT COUNT(id) from game\")\r\n        last_id = cursor.fetchone()\r\n        new_id = last_id[0] + 1\r\n\r\n        cursor.execute(\r\n            \"INSERT INTO game (id ,co2_limit, co2_budget, location, screen_name, target, attempts, difficulty) \"\r\n            f\"VALUES ({new_id},'999', '10000', NULL, '{user}', NULL, NULL, NULL)\")\r\n    else:\r\n        cursor.execute(\r\n            f\"UPDATE game SET location = NULL, target = NULL WHERE screen_name = '{user}'\")\r\n\r\n\r\n@routes.route('/settings-data', methods=['POST'])\r\ndef init_game():\r\n    global airport_type, username\r\n    game_dif = int()\r\n    location, coords = list(range(2)), list(range(2))\r\n\r\n    username = request.form['username']\r\n    difficulty = request.form['difficulty']\r\n    distance = request.form['distance']\r\n\r\n    check_username(username)\r\n\r\n    match difficulty:\r\n        case 'easy':\r\n            airport_type = \"'large_airport'\"\r\n            game_dif = 0\r\n        case 'normal':\r\n            airport_type = \"'large_airport' OR TYPE = 'medium_airport'\"\r\n            game_dif = 1\r\n        case 'hard':\r\n            airport_type = \"'large_airport' OR TYPE = 'medium_airport' OR TYPE = 'small_airport'\"\r\n            game_dif = 2\r\n\r\n    cursor = connection.cursor(buffered=True)\r\n    cursor.execute(\"SELECT ident, name, latitude_deg, longitude_deg FROM airport \"\r\n                   f\"WHERE type = {airport_type} ORDER BY RAND() LIMIT 1\")\r\n    location[0] = cursor.fetchall()\r\n\r\n    for row in location[0]:\r\n        coords[0] = [row[2], row[3]]\r\n        cursor.execute(f\"UPDATE game SET location = '{row[0]}' WHERE screen_name = '{username}'\")\r\n\r\n    while True:\r\n        cursor = connection.cursor(buffered=True)\r\n        cursor.execute(\"SELECT ident, name, latitude_deg, longitude_deg FROM airport \"\r\n                       f\"WHERE type = {airport_type} ORDER BY RAND() LIMIT 1\")\r\n        location[1] = cursor.fetchall()\r\n\r\n        for row in location[1]:\r\n            coords[1] = [row[2], row[3]]\r\n\r\n        match distance:\r\n            case 'close':\r\n                if 1000 <= geodesic(coords[0], coords[1]).km < 5000:\r\n                    break\r\n            case 'medium':\r\n                if 5000 <= geodesic(coords[0], coords[1]).km < 11000:\r\n                    break\r\n            case 'far':\r\n                if 11000 <= geodesic(coords[0], coords[1]).km:\r\n                    break\r\n\r\n    for row in location[1]:\r\n        cursor.execute(f\"UPDATE game SET target = '{row[0]}', attempts = 0, difficulty = {game_dif},\"\r\n                       f\" distance = 0 WHERE screen_name = '{username}'\")\r\n\r\n    return location[0] + location[1]\r\n\r\n\r\n@routes.route('/navigation-dat', methods=['POST'])\r\ndef debug():\r\n    temp_coords = list(range(2))\r\n    data = request.get_json()\r\n    temp_coords[0] = [data['lat'], data['lng']]\r\n    return temp_coords[0]\r\n\r\n\r\n@routes.route('/navigation-data', methods=['POST'])\r\ndef game_navigation():\r\n    arrive = False\r\n    temp_coords = list(range(2))\r\n    reach = 0\r\n    # Index 0: Closer / Index 1: Farther / Index 2: Same distance\r\n    attempts = travel_distance = int()\r\n    coords, location = list(range(3)), list(range(3))\r\n    # Index 0 = Current airport / Index 1 = Target airport / Index 2 = Next airport\r\n\r\n    data = request.get_json()\r\n    temp_coords[0] = [data['lat'], data['lng']]\r\n\r\n    cursor = connection.cursor(buffered=True)\r\n\r\n    cursor.execute(f\"SELECT attempts FROM game WHERE screen_name = '{username}'\")\r\n    for data in cursor.fetchall():\r\n        attempts = data[0]\r\n\r\n    cursor.execute(f\"SELECT distance FROM game WHERE screen_name = '{username}'\")\r\n    for data in cursor.fetchall():\r\n        travel_distance = data[0]\r\n\r\n    for i in range(2):\r\n        if i == 0:\r\n            value = 'location'\r\n        else:\r\n            value = 'target'\r\n        cursor.execute(f\"SELECT ident, name, latitude_deg, longitude_deg FROM airport \"\r\n                       f\"LEFT JOIN game ON game.{value} = ident WHERE game.screen_name = '{username}'\")\r\n        result = cursor.fetchall()\r\n        for row in result:\r\n            location[i] = [row[0], row[1], row[2], row[3]]\r\n            coords[i] = [row[2], row[3]]\r\n\r\n    cursor.execute(\"SELECT ident, name, latitude_deg, longitude_deg FROM airport \"\r\n                   f\"WHERE type = {airport_type}\")\r\n    airports = cursor.fetchall()\r\n\r\n    length = 1000\r\n    # Placeholder value for now\r\n    for row in airports:\r\n        temp_coords[1] = [row[2], row[3]]\r\n\r\n        if math.dist(temp_coords[0], temp_coords[1]) < length and math.dist(temp_coords[0], temp_coords[1]) != 0:\r\n            length = math.dist(temp_coords[0], temp_coords[1])\r\n            coords[2] = [row[2], row[3]]\r\n            location[2] = [row[0], row[1], row[2], row[3]]\r\n\r\n    attempts += 1\r\n    travel_distance += int(geodesic(coords[0], coords[2]).km)\r\n\r\n    if location[2] == location[1]:\r\n        cursor.execute(\"UPDATE game SET co2_limit = NULL, location = NULL, target = NULL, attempts = NULL, \"\r\n                       f\"difficulty = NULL, distance = NULL WHERE screen_name = '{username}'\")\r\n        arrive = True\r\n    elif location[2] == location[0]:\r\n        reach = 2\r\n    else:\r\n        cursor.execute(f\"UPDATE game SET location = '{location[2][0]}', attempts = {attempts}, \"\r\n                       f\"distance = {travel_distance} WHERE screen_name = '{username}'\")\r\n\r\n        if geodesic(coords[2], coords[1]).km < geodesic(coords[0], coords[1]):\r\n            reach = 0\r\n        else:\r\n            reach = 1\r\n\r\n    return [location[2], attempts, travel_distance, arrive, reach]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/game.py b/game.py
--- a/game.py	(revision 8542cc5aaad0de4db5524d62fae860f739706a4f)
+++ b/game.py	(date 1702298836576)
@@ -7,8 +7,8 @@
     host='127.0.0.1',
     port='3306',
     database='flight_game',
-    user='dbuser',
-    password='1234',
+    user='root',
+    password='Soft2023@fin',
     autocommit=True
 )
 
